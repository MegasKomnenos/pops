######################################################
################### COUNTY VIEW ######################
######################################################

window = {
	name = "holding_view"
	widgetid = "holding_view_id"
	parentanchor = bottom|left
	allow_outside = yes
	movable = no
	layer = windows_layer
	size = { 625 610 }
	datacontext = "[HoldingView.GetHolding]"
	datacontext = "[HoldingView.GetProvince]"
	datacontext = "[Province.GetCounty]"

	background = {
		texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
		spriteType = Corneredtiled
		spriteborder = { 18 18 }
		margin = { -23 -17 }
		margin_left = 20
		margin_bottom = 20
		texture_density = 2
		
		modify_texture = {
			name = "overlay"
			texture = "gfx/interface/component_overlay/overlay_effect.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
	}

	state = {
		name = _show
		position = { 0 0 }
		on_start = "[GetVariableSystem.Set( 'county_view_open', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"

		using = Animation_FadeIn_Standard
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		position = { -60 60 }
		on_start = "[GetVariableSystem.Clear( 'county_view_open' )]"
		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"
		on_start = "[GetScriptedGui( 'close_county_trade' ).Execute( GuiScope.SetRoot( HoldingView.GetProvince.GetCounty.GetCapital.MakeScope ).End )]"
		on_start = "[GetScriptedGui( 'close_prov_trade' ).Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
		on_start = "[GetScriptedGui( 'close_prov_pop' ).Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
		on_start = "[GetScriptedGui( 'close_prov_prod' ).Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
		on_start = "[GetScriptedGui( 'close_prov_build' ).Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
		on_start = "[GetScriptedGui( 'close_prov_merchant' ).Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
		
		using = Animation_FadeOut_Standard
		using = Sound_WindowHide_Standard
	}
	
	window = {
		parentanchor = top|right
		size = { 250 500 }
		position = { 400 0 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', County.GetCapital.MakeScope.Var('toggled_county_trade').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_county_trade' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( HoldingView.GetProvince.GetCounty.GetCapital.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 5
			layoutpolicy_vertical = expanding
			
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Food Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_food').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Cereal Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_cereal').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Salted Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_salted').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Salt Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_salt').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Mud Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_mud').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Fuel Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_fuel').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Fiber Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_fiber').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Timber Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_timber').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Metal Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_metal').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Western Exotics Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_exotics_w').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Eastern Exotics Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_exotics_e').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "General Exotics Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_exotics_g').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Textile Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_textile').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Pottery Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_pottery').GetValue]"
				using = Font_Size_Small
			}
			text_single = {
				layoutpolicy_horizontal = expanding
				text = "Tools Price: [County.GetCapital.MakeScope.Var('info_trade_county_price_tools').GetValue]"
				using = Font_Size_Small
			}
		}
	}
	
	window = {
		parentanchor = top|right
		size = { 450 900 }
		position = { 400 -400 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', Province.MakeScope.Var('toggled_prov_trade').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_prov_trade' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 10
			layoutpolicy_vertical = expanding
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Food:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_food').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_food').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_food').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_food').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_food').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_food').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_food').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_food').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_food').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_food').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Cereal:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_cereal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_cereal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_cereal').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_cereal').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_cereal').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_cereal').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_cereal').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_cereal').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_cereal').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_cereal').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Salted:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_salted').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_salted').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_salted').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_salted').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_salted').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_salted').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_salted').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_salted').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_salted').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_salted').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Salt:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_salt').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_salt').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_salt').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_salt').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_salt').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_salt').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_salt').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_salt').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_salt').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_salt').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Mud:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_mud').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_mud').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_mud').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_mud').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_mud').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_mud').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_mud').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_mud').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_mud').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_mud').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Fuel:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_fuel').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_fuel').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_fuel').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_fuel').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_fuel').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_fuel').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_fuel').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_fuel').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_fuel').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_fuel').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Fiber:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_fiber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_fiber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_fiber').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_fiber').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_fiber').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_fiber').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_fiber').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_fiber').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_fiber').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_fiber').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Timber:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_timber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_timber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_timber').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_timber').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_timber').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_timber').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_timber').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_timber').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_timber').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_timber').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Metal:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_metal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_metal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_metal').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_metal').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_metal').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_metal').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_metal').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_metal').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_metal').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_metal').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Western Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_exotics_w').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_exotics_w').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_exotics_w').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_exotics_w').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_exotics_w').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_exotics_w').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_exotics_w').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_exotics_w').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_exotics_w').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_exotics_w').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Eastern Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_exotics_e').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_exotics_e').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_exotics_e').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_exotics_e').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_exotics_e').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_exotics_e').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_exotics_e').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_exotics_e').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_exotics_e').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_exotics_e').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "General Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_exotics_g').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_exotics_g').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_exotics_g').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_exotics_g').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_exotics_g').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_exotics_g').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_exotics_g').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_exotics_g').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_exotics_g').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_exotics_g').GetValue])"
					}
				}
			}
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Textile:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_textile').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_textile').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_textile').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_textile').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_textile').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_textile').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_textile').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_textile').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_textile').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_textile').GetValue])"
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Pottery:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('prod_has_pottery').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_pottery').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_pottery').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_pottery').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_pottery').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_pottery').GetValue])"
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_pottery').GetValue]"
						using = Font_Size_Small
						tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_pottery').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_pottery').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_pottery').GetValue])"
					}
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Tools:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Stockpile: [Province.MakeScope.Var('prod_has_tools').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Supply: [Province.MakeScope.Var('info_trade_prov_sply_tools').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Demand: [Province.MakeScope.Var('info_trade_prov_dmnd_tools').GetValue]"
					using = Font_Size_Small
					tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_dmnd_pop_tools').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_prod_tools').GetValue], [Province.MakeScope.Var('info_trade_prov_dmnd_build_tools').GetValue])"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Demand Met: [Province.MakeScope.Var('info_trade_prov_in_tools').GetValue]"
					using = Font_Size_Small
					tooltip = "Pop, Industry, Construction: ([Province.MakeScope.Var('info_trade_prov_in_pop_tools').GetValue], [Province.MakeScope.Var('info_trade_prov_in_prod_tools').GetValue], [Province.MakeScope.Var('info_trade_prov_in_build_tools').GetValue])"
				}
			}
		}
	}
	
	window = {
		parentanchor = top|right
		size = { 200 800 }
		position = { 400 -400 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', Province.MakeScope.Var('toggled_prov_pop').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_prov_pop' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 10
			layoutpolicy_vertical = expanding
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Pop:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('pop_total').GetValue]k"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Wealth: [Province.MakeScope.Var('pop_wealth').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_pop').GetValue]"
					using = Font_Size_Small
					tooltip = "Free, Lord: ([Province.MakeScope.Var('pop_earn_free').GetValue], [Province.MakeScope.Var('pop_earn_serf').GetValue])"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_pop').GetValue]"
					using = Font_Size_Small
					tooltip = "Free, Lord: ([Province.MakeScope.Var('pop_pay_free').GetValue], [Province.MakeScope.Var('pop_pay_serf').GetValue])"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Calorie: [Province.MakeScope.Var('pop_calorie').GetValue]"
					using = Font_Size_Small
					tooltip = "Spending: [Province.MakeScope.Var('pop_pay_calorie').GetValue]"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Nutrient: [Province.MakeScope.Var('pop_nutrient').GetValue]"
					using = Font_Size_Small
					tooltip = "Spending: [Province.MakeScope.Var('pop_pay_nutrient').GetValue]"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Comfort: [Province.MakeScope.Var('pop_comfort').GetValue]"
					using = Font_Size_Small
					tooltip = "Spending: [Province.MakeScope.Var('pop_pay_comfort').GetValue]"
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Luxury: [Province.MakeScope.Var('pop_luxury').GetValue]"
					using = Font_Size_Small
					tooltip = "Spending: [Province.MakeScope.Var('pop_pay_luxury').GetValue]"
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Farm:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('farm_total').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Potential: [Province.MakeScope.Var('farm_potential').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_farm').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_farm').GetValue]"
					using = Font_Size_Small
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Pasture:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('pasture_total').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Potential: [Province.MakeScope.Var('pasture_potential').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_pasture').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_pasture').GetValue]"
					using = Font_Size_Small
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Forest:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('forest_total').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Intensivity: [Province.MakeScope.Var('forest_intensivity').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_forest').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_forest').GetValue]"
					using = Font_Size_Small
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Extraction:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('extraction_total').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Potential: [Province.MakeScope.Var('extraction_potential').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_extraction').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_extraction').GetValue]"
					using = Font_Size_Small
				}
			}
			
			vbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "Workshop:"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Size: [Province.MakeScope.Var('workshop_total').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Potential: Unlimited"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Income: [Province.MakeScope.Var('info_pop_prov_earn_workshop').GetValue]"
					using = Font_Size_Small
				}
				text_single = {
					layoutpolicy_horizontal = expanding
					text = " - Spending: [Province.MakeScope.Var('info_pop_prov_pay_workshop').GetValue]"
					using = Font_Size_Small
				}
			}
		}
	}
	
	window = {
		parentanchor = top|right
		size = { 800 900 }
		position = { 400 -400 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', Province.MakeScope.Var('toggled_prov_prod').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_prov_prod' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 10
			layoutpolicy_vertical = expanding
			
			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_0')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_1')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_2')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_3')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_4')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_5')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_6')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_7')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_8')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_9')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_10')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_11')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_12')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_13')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_14')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_15')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_16')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_17')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_18')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_19')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_20')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_21')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_22')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_23')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_24')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_25')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_26')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_27')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_28')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_prod_29')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
	
	window = {
		parentanchor = top|right
		size = { 800 900 }
		position = { 400 -400 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', Province.MakeScope.Var('toggled_prov_build').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_prov_build' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 10
			layoutpolicy_vertical = expanding
			
			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_0')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_1')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_2')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_3')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_4')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_5')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_6')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_7')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_8')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
			
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_9')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_10')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_11')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_12')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_13')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_14')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_15')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_16')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_17')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_18')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_19')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_20')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_21')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_22')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_23')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_24')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_25')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_26')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_27')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_28')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
				text_single = {
					parentanchor = left
					text = "[Province.Custom('province_build_29')]"
					using = Font_Size_Small
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
	
	window = {
		parentanchor = top|right
		size = { 500 950 }
		position = { 400 -400 }
		movable = yes
		visible = "[EqualTo_CFixedPoint('(CFixedPoint)1', Province.MakeScope.Var('toggled_prov_merchant').GetValue)]"
		
		background = {
			texture = "gfx/interface/component_tiles/tile_window_background_subwindow.dds"
			spriteType = Corneredtiled
			spriteborder = { 18 18 }
			texture_density = 2
			
			modify_texture = {
				name = "overlay"
				texture = "gfx/interface/component_overlay/overlay_effect.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = overlay
			}
		}
		
		buttons_window_control = {
			parentanchor = top|right
			blockoverride "button_close"
			{
				datacontext = "[GetScriptedGui( 'close_prov_merchant' )]"
				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
			}
		}
		
		vbox = {
			margin_left = 20
			margin_bottom = 15
			margin_top = 10
			layoutpolicy_vertical = expanding
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Trade:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Income: [Province.MakeScope.Var('trade_merchant').Var('trade_earn').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Spending: [Province.MakeScope.Var('trade_merchant').Var('trade_pay').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Food:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_food').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_food').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_food').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_food').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_food').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_food').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Cereal:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_cereal').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_cereal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_cereal').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_cereal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_cereal').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_cereal').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Salted:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_salted').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_salted').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_salted').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_salted').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_salted').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_salted').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Salt:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_salt').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_salt').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_salt').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_salt').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_salt').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_salt').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Mud:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_mud').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_mud').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_mud').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_mud').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_mud').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_mud').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Fuel:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_fuel').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_fuel').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_fuel').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_fuel').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_fuel').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_fuel').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Fiber:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_fiber').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_fiber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_fiber').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_fiber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_fiber').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_fiber').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Timber:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_timber').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_timber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_timber').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_timber').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_timber').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_timber').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Metal:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_metal').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_metal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_metal').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_metal').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_metal').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_metal').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Western Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_exotics_w').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_exotics_w').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_exotics_w').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_exotics_w').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_exotics_w').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_exotics_w').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Eastern Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_exotics_e').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_exotics_e').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_exotics_e').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_exotics_e').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_exotics_e').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_exotics_e').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "General Exotics:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_exotics_g').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_exotics_g').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_exotics_g').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_exotics_g').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_exotics_g').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_exotics_g').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Textile:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_textile').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_textile').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_textile').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_textile').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_textile').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_textile').GetValue]"
						using = Font_Size_Small
					}
				}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Pottery:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_pottery').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_pottery').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_pottery').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_pottery').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_pottery').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_pottery').GetValue]"
						using = Font_Size_Small
					}
				}
				vbox = {
					layoutpolicy_horizontal = expanding
					
					text_single = {
						parentanchor = left
						text = "Tools:"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						parentanchor = left
						text = " - Price: [Province.MakeScope.Var('trade_merchant').Var('trade_price_tools').GetValue]"
						using = Font_Size_Small
						layoutpolicy_horizontal = expanding
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Stockpile: [Province.MakeScope.Var('trade_merchant').Var('trade_has_tools').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Offer, Sold: [Province.MakeScope.Var('trade_merchant').Var('trade_sply_tools').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_out_tools').GetValue]"
						using = Font_Size_Small
					}
					text_single = {
						layoutpolicy_horizontal = expanding
						text = " - Bid, Bought: [Province.MakeScope.Var('trade_merchant').Var('trade_dmnd_tools').GetValue], [Province.MakeScope.Var('trade_merchant').Var('trade_in_tools').GetValue]"
						using = Font_Size_Small
					}
				}
			}
		}
	}

	vbox = {
		name = "window_content"
		margin_right = 35
		margin_top = 30

		hbox = {
			name = "county_header"
			layoutpolicy_horizontal = expanding
			margin_right = 15
			margin_left = 5
			margin_top = 5
			margin_bottom = 5
			spacing = 2

			background = {
				using = Background_Area_Dark
				margin_left = 5
			}

			coa_title_small = {
				datacontext = "[HoldingView.GetCountyTitle]"
			}

			vbox = {
				hbox = {
					layoutpolicy_horizontal = expanding
					ignoreinvisible = yes

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingView.GetCountyTitle.GetNameNoTooltip]"
						margin_bottom = 4
						using = Font_Size_Big
						font = TitleFont
						max_width = 390
						fontsize_min = 16
					}

					button_edit_text = {
						visible = "[HoldingView.GetCountyTitle.CanPlayerRenameTitle]"
						onclick = "[OpenTitleRenamePopup(HoldingView.GetCountyTitle)]"
						tooltip = "EDIT_TITLE_NAME"
					}
					
					button_icon = {
						name = "toggle_county_trade"
						datacontext = "[GetScriptedGui( 'toggle_county_trade' )]"
						onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( HoldingView.GetProvince.GetCounty.GetCapital.MakeScope ).End )]"
						size = { 25 25 }
						texture = "gfx/interface/buttons/button_round_big.dds"

						background = {
							texture = "gfx/interface/window_county/building_status_circle.dds"
							size = { 25 25 }
							framesize = { 120 120 }
							using = Master_Button_Modify_Texture

							blockoverride "master_color_frame" {
								frame = 3
							}
						}
					}
				}

				vbox = {
					datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "your_county"
						visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_YOUR_COUNTY"
						margin_left = 2
						margin_bottom = 4
						using = Font_Size_Small
					}

					text_single = {
						name = "top_realm_county"
						visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_TOP_REALM_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}

					text_single = {
						name = "foreign_county"
						visible = "[Not(Or(ObjectsEqual( Character.Self, GetPlayer ),Character.IsOtherLiegeOrAbove( GetPlayer )))]"
						layoutpolicy_horizontal = expanding
						text = "HOLDING_VIEW_FOREIGN_COUNTY"
						margin_left = 5
						margin_bottom = 4
						using = Font_Size_Small
					}
				}
			}

			expand = {}

			### SIEGE AND RAID GOTO BUTTON ###
			button_group = {
				name = "open_siege_button"
				datacontext = "[HoldingView.GetProvince.GetSiege]"
				visible = "[HoldingView.GetProvince.HasActiveSiege]"
				onclick = "[DefaultOnSiegeClick(Siege.GetID)]"
				tooltip = "[Siege.GetSiegeDescription]"
				using = tooltip_se
				shortcut = county_go_to_siege
				using = siege_goto_template
			}

			button_group = {
				name = "open_raid_button"
				datacontext = "[HoldingView.GetProvince.GetRaid]"
				visible = "[HoldingView.GetProvince.HasActiveRaid]"
				onclick = "[DefaultOnRaidClick( Raid.Self )]"
				tooltip = "MAP_RAID_TOOLTIP"
				shortcut = county_go_to_siege
				using = tooltip_se
				using = raid_goto_template
				blockoverride "tooltip" {}
			}

			buttons_window_control = {

				blockoverride "button_go_to"
				{
					tooltip = "GOTO_PROVINCE_TT"
					using = tooltip_ne
					onclick = "[HoldingView.PanToCountyCapital]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_close"
				{
					onclick = "[HoldingView.Close]"
				}
			}
		}

		####################################
		########### COUNTY INFO ############
		####################################

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 2 }
			spacing = 10

			hbox = {
				datamodel = "[HoldingView.GetDeJureLieges]"

				item = {

					coa_title_tiny_crown = {
						visible = "[GreaterThan_int32( Title.GetTierFrame, '(int32)3' )]"
						using = tooltip_se
					}
				}
			}

			text_single = {
				text = "DE_JURE_HIERARCHY"
				default_format = "#low"
			}

			expand = {}

			hbox = {
				name = "county_modifiers_grid"
				datamodel = "[HoldingView.GetCountyModifiers]"
				margin_right = 15

				item = {

					icon = {
						size = { 30 30 }
						texture = "[ModifierItem.GetIcon]"
						using = tooltip_ne
						tooltip = "[ModifierItem.GetTooltip]"
					}
				}
			}

			hbox = {
				layoutpolicy_vertical = expanding
				visible = [County.IsFullyOccupied]
				datacontext = [County.GetCountyOccupant]

				widget = {
					size = { 52 52 }

					icon = {
						size = { 70 70 }
						name = "war_icon"
						texture = "gfx/interface/icons/war_status/war_icon.dds"
						parentanchor = center
					}

					coa_realm_small = {
						position = { 1 0 }
						blockoverride "coa_button" {
							tooltip = "COUNTY_OCCUPIER_TOOLTIP"
							onclick = "[DefaultOnRealmFlagClick(Character.GetID)]"
							onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
							button_ignore = none
							tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
						}
					}
				}
			}
		}

		hbox = {
			name = "county_info"
			datacontext = "[HoldingView.GetProvince.GetCountyCapitalProvince]"
			layoutpolicy_horizontal = expanding

			background = {
				using = Background_Area
				margin_bottom = -2
			}

			hbox = {
				name = "holder_info"
				datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
				visible = "[HoldingView.GetProvince.HasCountyCapitalProvince]"
				layoutpolicy_horizontal = expanding
				margin = { 5 5 }
				margin_right = 15

				background = {
					name = "Held_directly_by_me"
					visible = "[ObjectsEqual( Character.Self, GetPlayer )]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Green_Transparent

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				background = {
					name = "Held_by_someone_below_me"
					visible = "[Character.IsOtherLiegeOrAbove( GetPlayer )]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Blue_Transparent

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				background = {
					name = "Held_under_my_Top_Liege,_but_Not_Me"
					visible = "[And(And(Not( ObjectsEqual( Character.Self, GetPlayer )),Not(Character.IsOtherLiegeOrAbove( GetPlayer ))),ObjectsEqual( Character.GetTopLiege, GetPlayer.GetTopLiege ))]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_04.dds"
					spriteType = Corneredtiled
					margin = { -7 -7 }
					using = Color_Bright_Yellow_Transparent

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						texture_density = 2
						blend_mode = alphamultiply
					}
				}

				#####

				## Holder
				portrait_head = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_top = 6

					vbox = {
						layoutpolicy_horizontal = expanding
						margin_left = 10
						margin_bottom = 10

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_VIEW_COUNTY_HOLDER"
							default_format = "#low"
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_multi = {
								datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
								visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
								layoutpolicy_horizontal = expanding
								max_width = 190
								text = "[Character.GetRelationToString( GetPlayer )]"
								autoresize = yes
							}
						}

						text_multi = {
							datacontext = "[HoldingView.GetCountyTitle.GetHolder]"
							layoutpolicy_horizontal = expanding
							max_width = 190
							text = "[Character.GetShortUINameNoTooltip|U]"
							default_format = "#high"
							autoresize = yes
						}
					}

					expand = {}
				}
			}

			vbox = {
				name = "county_stats"
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				margin_right = 15
				min_width = 260

				hbox = {
					layoutpolicy_horizontal = expanding
					datacontext = "[HoldingView.GetProvince.GetCounty]";

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[control|E]:"
					}

					text_single = {
						text = "[County.GetControlLevel]"
						default_format = "#high"
						tooltip = "COUNTY_CONTROL_TOOLTIP"

						background = {
							visible = "[LessThan_CFixedPoint(County.GetControl, '(CFixedPoint)100')]"
							margin = { 5 0 }
							using = Status_Bad
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[development|E]:"
					}

					text_single = {
						text = "[HoldingView.GetProvince.GetCounty.GetDevelopmentLevelString]"
						default_format = "#high"
						tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[county_opinion|E]:"
					}

					button_normal = {
						name = "in_faction"
						visible = "[HoldingView.IsInFaction]"
						onclick = "[HoldingView.OnGotoFaction]"
						tooltip = "COUNTY_IN_FACTION_TOOLTIP"
						size = { 20 20 }
						texture = "gfx/interface/icons/symbols/icon_warning.dds"
					}

					text_single = {
						text = "[HoldingView.GetCountyOpinion|=+]"
						default_format = "#high"
						tooltip = "COUNTY_OPINION_TOOLTIP"
					}
				}

				hbox = {
					datacontext = "[Province.GetCounty.GetCulture]"
					layoutpolicy_horizontal = expanding
					spacing = 2

					using = tooltip_ne

					tooltipwidget = {

						culture_tooltip = {

							blockoverride "extra_info"
							{
								text_single = {
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
									text = "COUNTY_NOT_YOUR_CULTURE"
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[culture|E]:"
					}

					button_group = {
						# shortcut = "innovations_window"
						onclick = "[DefaultOnCultureClick(Culture.GetID)]"

						text_single = {
							text = "CULTURE_COUNTY_WINDOW"
							default_format = "#high"

							background = {
								visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}

				hbox = {
					datacontext = "[Province.GetCounty.GetFaith]"
					layoutpolicy_horizontal = expanding
					spacing = 2
					using = tooltip_ne

					tooltipwidget = {

						faith_tooltip = {

							blockoverride "extra_info" {
								using = faith_tooltip_click_default_extra_info

								text_single = {
									margin = { 10 0 }
									layoutpolicy_horizontal = expanding
									fonttintcolor = "[TooltipInfo.GetTintColor]"
									using = DefaultTooltipText
									visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
									text = "COUNTY_NOT_YOUR_FAITH"
								}
							}
						}
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[faith|E]:"
					}

					icon = {
						size = { 22 22 }
						datacontext = "[Province.GetCounty.GetFaith]"
						texture = "[Faith.GetIcon]"
					}

					button_group = {
						# shortcut = "faith_window"
						onclick = "[DefaultOnFaithClick(Faith.GetID)]"

						text_single = {
							text = "[Faith.GetNameNoTooltip]"
							default_format = "#high"

							background = {
								visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
								margin = { 5 0 }
								using = Status_Bad
							}
						}
					}
				}
			}
		}

		divider = {
			layoutpolicy_horizontal = expanding
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			hbox = {
				margin_left = 5
				spacing = 5
				datamodel = "[HoldingView.GetCountyHoldings]"

				item = {
					button_tab_dark = {
						datacontext = "[GUICountyHolding.GetHolding]"
						size = { 45 45  }
						down = "[GUICountyHolding.IsSelected]"
						alwaystransparent = "[GUICountyHolding.IsSelected]"
						onclick = "[GUICountyHolding.OnClick]"
						onclick = "[PdxGuiTriggerAllAnimations('holding_view_refresh')]"
						using = tooltip_ne
						tooltipwidget = { holding_tooltip_click = {} }

						icon_building_tab = {
							parentanchor = center
							position = { 0 1 }
							size = { 35 30 }
							alwaystransparent = yes
							down = "[GUICountyHolding.IsSelected]"
							texture = "[GUICountyHolding.GetHolding.GetType.GetTabIcon]"

							blockoverride "button_frames"
							{
								gfxtype = togglepushbuttongfx
								effectname = "NoHighlight"
								upframe = 4
								uphoverframe = 5
								uppressedframe = 6
								downframe = 5
							}
						}

						icon = {
							name = "realm_capital_icon"
							visible = "[GUICountyHolding.GetHolding.GetProvince.GetTitle.IsCountyCapital]"
							parentanchor = bottom|right
							size = { 32 32 }
							position = { 4 0 }
							framesize = { 63 63 }
							texture = "gfx/interface/icons/icon_capital.dds"
							frame = 1
						}
					}
				}
			}

			expand = {}
		}

		####################################
		########## HOLDING INFO ############
		####################################
		margin_widget = {
			name = "holding_info"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			minimumsize = { 0 200 }
			margin = { 10 5 }
			margin_bottom = 10
			margin_right = 15
			scissor = yes

			state = {
				name = "holding_view_refresh"
				next = a
				alpha = 0.5
			}

			state = {
				name = "a"
				alpha = 1
				duration = 0.5
				using = Animation_Curve_Default
			}

			background = {
				using = Background_Area_Dark
				margin_left = 5
				margin_top = 3
			}

			background = {
				visible = "[HoldingView.HasHolding]"
				texture = "[HoldingView.GetHolding.GetIllustration]"
				alpha = 0.8

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}
			background = {
				visible = "[Not(HoldingView.HasHolding)]"
				texture = "[HoldingView.GetProvince.GetTerrain.GetIllustration]"
				alpha = 0.7

				modify_texture = {
					texture = "gfx/interface/window_county/mask_holding_illustration.dds"
					blend_mode = alphamultiply
					alpha = 0.95
				}
			}

			vbox = {
				name = "constructing_holding"
				parentanchor = center
				visible = "[HoldingView.IsBeingConstructed]"
				expand = {}

				progressbar_standard = {
					name = "constructing_holding_progress"
					alwaystransparent = yes
					size = { 300 30 }
					value = "[HoldingView.GetConstructionProgressForSlot('(int32)0')]"
					direction = horizontal
					tooltip = "[HoldingView.GetHoldingUnderConstructionTooltip]"

					text_single = {
						parentanchor = center
						text = "[HoldingView.GetConstructionTimeLeftForSlot('(int32)0')]"
						default_format = "#high"
						using = Font_Size_Medium
					}
				}

				button_standard_big = {
					name = "cancel_holding_construction"
					size = { 300 30 }
					text = "CANCEL_HOLDING_CONSTRUCTION"
					onclick = "[HoldingView.CancelHoldingConstruction]"
					tooltip = "CANCEL_HOLDING_CONSTRUCTION_TOOLTIP"
				}

				expand = {}
			}

			### Backgrounds ###

			#################################################
			#### Same as county owner (no background)

			#################################################
			#### Not same as county owner

			background = {
				visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Blue
				margin = { -3 -3 }
				alpha = 0.3
			}

			#################################################
			#### Leased to Church

			background = {
				#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Red
				margin = { -3 -3 }
			}

			#################################################
			#### Leased to Holy Order

			background = {
				#visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
				visible = no
				texture = "gfx/interface/component_masks/mask_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 15 15 }
				using = Color_Green
				margin = { -3 -3 }
			}

			###

			button_standard_big = {
				name = "construct_holding"
				visible = "[And(Not(HoldingView.HasHolding), Not(HoldingView.IsBeingConstructed))]"
				parentanchor = bottom|hcenter
				position = { 0 -10 }
				size = { 300 50 }
				text = "CREATE_NEW_HOLDING"
				onclick = "[HoldingView.OnConstructHoldingClick]"
				tooltip = "[HoldingView.GetHoldingConstructionTooltip]"
				enabled = "[And(HoldingView.CanNewHoldingBeConstructed, Not(HoldingView.IsSelectingHoldingType))]"
			}


			### TOP LEFT
			flowcontainer = {
				ignoreinvisible = yes
				spacing = 5
				margin = { 5 5 }

				coa_title_medium = {
					datacontext = "[HoldingView.GetTitle]"
					visible = "[HoldingView.GetTitle.HasHolder]"
				}

				flowcontainer = {
					direction = vertical
					ignoreinvisible = yes
					margin_top = 5

					flowcontainer = {
						visible = "[HoldingView.GetTitle.HasHolder]"
						ignoreinvisible = yes

						text_single = {
							text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							tooltip = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
							default_format = "#high"
							align = nobaseline
							using = Font_Size_Big
							max_width = 190
							fontsize_min = 16
						}

						button_edit_text = {
							visible = "[HoldingView.GetProvince.GetTitle.CanPlayerRenameTitle]"
							parentanchor = vcenter
							size = { 25 25 }
							onclick = "[OpenTitleRenamePopup(HoldingView.GetProvince.GetTitle)]"
							tooltip = "EDIT_TITLE_NAME"
						}

						spacer = {
							size = { 3 3 }
						}

						widget = {
							size = { 32 32 }

							icon = {
								name = "county_capital_icon"
								visible = "[And(HoldingView.GetProvince.GetTitle.IsCountyCapital, Not(HoldingView.GetProvince.IsRealmCapital))]"
								parentanchor = center
								size = { 40 40 }
								texture = "gfx/interface/icons/icon_capital.dds"
								framesize = { 63 63 }
								frame = 1
								tooltip = "COUNTY_CAPITAL_TOOLTIP"
							}

							icon = {
								name = "realm_capital_icon"
								visible = "[HoldingView.GetProvince.IsRealmCapital]"
								parentanchor = center
								size = { 40 40 }
								framesize = { 63 63 }
								texture = "gfx/interface/icons/icon_capital.dds"
								frame = 2
								tooltip = "REALM_CAPITAL_TOOLTIP"
							}
						}

						widget = {
							size = { 32 32 }

							button_move_capital = {
								name = "set_realm_capital_button"
								visible = "[HoldingView.PotentialSetRealmCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetRealmCapital]"
								tooltip = "[HoldingView.GetSetRealmCapitalTooltip]"
								enabled = "[HoldingView.CanSetRealmCapital]"
							}

							button_move_capital = {
								name = "set_county_capital_button"
								visible = "[HoldingView.CanSetCountyCapital]"
								position = { -3 5 }
								texture = "gfx/interface/icons/flat_icons/move_capital.dds"
								onclick = "[HoldingView.SetCountyCapital]"
								tooltip = "SET_COUNTY_CAPITAL_TOOLTIP"
							}
						}
					}

					text_single = {
						visible = "[Not(HoldingView.GetTitle.HasHolder)]"
						text = "[HoldingView.GetProvince.GetTitle.GetNameNoTierNoTooltip]"
						default_format = "#medium"
						using = Font_Size_Big
					}

					flowcontainer = {
						datacontext = "[HoldingView.GetGUIHoldingBuilding]"
						ignoreinvisible = yes

						text_label_left = {
							text = "[HoldingView.GetHoldingDesc]"
						}
					}

					text_single = {
						visible = "[HoldingView.GetProvince.IsOccupied]"
						text = "[HoldingView.GetOccupiedInfo]"
						default_format = "#high"
					}
					
					flowcontainer = {
						button_icon = {
							name = "toggle_prov_trade"
							datacontext = "[GetScriptedGui( 'toggle_prov_trade' )]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
							size = { 25 25 }
							texture = "gfx/interface/buttons/button_round_big.dds"

							background = {
								texture = "gfx/interface/window_county/building_status_circle.dds"
								size = { 25 25 }
								framesize = { 120 120 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 3
								}
							}
						}
						button_icon = {
							name = "toggle_prov_pop"
							datacontext = "[GetScriptedGui( 'toggle_prov_pop' )]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
							size = { 25 25 }
							texture = "gfx/interface/buttons/button_round_big.dds"

							background = {
								texture = "gfx/interface/window_county/building_status_circle.dds"
								size = { 25 25 }
								framesize = { 120 120 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 3
								}
							}
						}
						button_icon = {
							name = "toggle_prov_prod"
							datacontext = "[GetScriptedGui( 'toggle_prov_prod' )]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
							size = { 25 25 }
							texture = "gfx/interface/buttons/button_round_big.dds"

							background = {
								texture = "gfx/interface/window_county/building_status_circle.dds"
								size = { 25 25 }
								framesize = { 120 120 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 3
								}
							}
						}
						button_icon = {
							name = "toggle_prov_build"
							datacontext = "[GetScriptedGui( 'toggle_prov_build' )]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
							size = { 25 25 }
							texture = "gfx/interface/buttons/button_round_big.dds"

							background = {
								texture = "gfx/interface/window_county/building_status_circle.dds"
								size = { 25 25 }
								framesize = { 120 120 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 3
								}
							}
						}
						button_icon = {
							name = "toggle_prov_merchant"
							datacontext = "[GetScriptedGui( 'toggle_prov_merchant' )]"
							onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( Province.MakeScope ).End )]"
							size = { 25 25 }
							texture = "gfx/interface/buttons/button_round_big.dds"

							background = {
								texture = "gfx/interface/window_county/building_status_circle.dds"
								size = { 25 25 }
								framesize = { 120 120 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 3
								}
							}
						}
					}
				}
			}

			### BOTTOM LEFT
			widget = {
				parentanchor = bottom|left
				size = { 280 150 }
				alwaystransparent = yes

				background = {
					visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
					texture = "gfx/interface/component_masks/patterns/mask_pattern_02.dds"
					spriteType = Corneredtiled
					using = Color_Blue
					alpha = 0.6
					margin_bottom = 10
					margin_left = 5

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
						alpha = 0.9
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_texture_01.dds"
						spriteType = Corneredtiled
						spriteborder = { 15 15 }
						blend_mode = alphamultiply
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
						blend_mode = alphamultiply
					}
				}

				background = {
					visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"
					texture = "gfx/interface/component_masks/mask_frame.dds"
					spriteType = Corneredstretched
					spriteborder = { 15 15 }
					using = Color_Blue
					alpha = 0.6
					margin_bottom = 10
					margin_left = 5

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_horizontal_right.dds"
						blend_mode = alphamultiply
						alpha = 0.9
					}

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
						blend_mode = alphamultiply
					}
				}

				vbox = {
					expand = {}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin = { 5 0 }

						button_standard = {
							name = "toggle_find_vassal"
							visible = "[And( And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), Not( HoldingView.GetTitle.IsBarony ) ), Not(HoldingView.GetTitle.IsLeasedOut))]"
							text = "FIND_VASSAL_HEADER"
							onclick = "[HoldingView.ToggleFindVassalListWindow]"
							tooltip = "FIND_VASSAL_BUTTON_HOLDING_VIEW_TOOLTIP"
						}

						button_standard = {
							name = "grant_to_local_noble"
							visible = "[And( And( And( ObjectsEqual( HoldingView.GetTitle.GetHolder, GetPlayer ), HoldingView.GetTitle.CanUseFindVassal( GetPlayer ) ), HoldingView.GetTitle.IsBarony ), Not(HoldingView.GetTitle.IsLeasedOut))]"
							text = "GRANT_TO_LOCAL_NOBLE_HEADER"
							onclick = "[HoldingView.CreateHolderForBarony]"
							tooltip = "GRANT_TO_LOCAL_NOBLE_BUTTON_HOLDING_VIEW_TOOLTIP"
						}

						expand = {}
					}

					hbox = {
						datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
						layoutpolicy_horizontal = expanding

						visible = "[And(NotEqualTo_uint32( HoldingView.GetCountyTitle.GetHolder.GetID, HoldingView.GetTitle.GetLesseeOrHolder.GetID ), HoldingView.GetTitle.HasHolder)]"

						portrait_head_small = {
							blockoverride "opinion_box" {}
						}

						vbox = {
							name = "theocracy_property"
							datacontext = "[HoldingView.GetTitle.GetLesseeOrHolder]"
							layoutpolicy_vertical = expanding
							margin_top = 4

							expand = {}

							hbox = {
								layoutpolicy_horizontal = expanding
								container = {
									name = "revoke_lease_button"
									datacontext = "[HoldingView.GetTitle]"
									visible = "[Title.IsLeasedOut]"

									button_round  = {
										datacontext = "[Title.GetLessee]"
										visible = "[And( Title.GetHolder.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('revoke_leased_title_interaction', Title.Self) )]"
										enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('revoke_leased_title_interaction', Title.Self)]"
										tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('revoke_leased_title_interaction', Title.Self)]"
										oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"

										button_revoke_lease = {
											parentanchor = center
											onclick = "[Character.OpenPlayerInteractionWithTargetTitle('revoke_leased_title_interaction', Title.Self)]"
										}
									}
								}
								expand = {}
							}

							hbox = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Title.IsUnderTheocraticLease]"
								tooltip = "CHURCH_PROPERTY_TOOLTIP"
								layoutpolicy_horizontal = expanding

								icon = {
									name = "church_property"
									texture = "gfx/interface/icons/icon_holding_church.dds"
									size = { 30 30 }
								}

								hbox = {
									visible = "[Title.GetHolder.IsLocalPlayer]"
									ignoreinvisible = yes

									icon = {
										name = "icon"
										size = { 28 28 }
										texture = "[Title.GetHolder.GetPietyLevelTexture]"
									}

									text_single = {
										name = "value"
										text = "[HoldingView.GetHolderModifierFromBuildingsValue('monthly_piety')|^+=]"
									}
								}

								expand = {}
							}

							text_single = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Not(Title.IsLeasedOut)]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_HOLDER"
								default_format = "#low"
							}

							text_single = {
								datacontext = "[HoldingView.GetTitle]"
								visible = "[Title.IsLeasedOut]"
								layoutpolicy_horizontal = expanding
								text = "HOLDING_VIEW_LESSEE"
								default_format = "#low"
							}

							text_single = {
								visible = "[Character.HasRelationTo( GetPlayer )]"
								layoutpolicy_horizontal = expanding
								text = "[Character.GetRelationToString( GetPlayer )]"
								default_format = "#low"
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[Character.GetShortUIName]"
								format_override = { high medium }
							}
						}

						expand = {}
					}
				}
			}

			### FEUDALIZE A TRIBAL HOLDING ###
			widget = {
				allow_outside = yes
				parentanchor = center
				position = { 76 -20 }

				button_round  = {
					datacontext = "[HoldingView.GetGUIHoldingBuilding]"
					datacontext = "[HoldingView.GetTitle]"
					datacontext = "[HoldingView.GetHolder]"
					visible = "[And( Character.IsLocalPlayer, Character.IsPlayerInteractionShownAndCanPickTitle('feudalize_tribal_holding_interaction', Title.Self) )]"
					enabled = "[Character.IsPlayerInteractionWithTargetTitleValid('feudalize_tribal_holding_interaction', Title.Self)]"
					tooltip = "[Character.GetPlayerInteractionWithTargetTitleTooltip('feudalize_tribal_holding_interaction', Title.Self)]"
					oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_select"
					onclick = "[Character.OpenPlayerInteractionWithTargetTitle('feudalize_tribal_holding_interaction', Title.Self)]"

					button_feudalize_tribe = {
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
				}
			}

			### BOTTOM LEFT
			hbox = {
				parentanchor = top|right
				margin_top = 5
				ignoreinvisible = yes

				expand = {}

				vbox = {
					layoutpolicy_vertical = expanding
					margin = { 7 3 }

					icon = {
						name = "terrain"
						datacontext = "[HoldingView.GetProvince.GetTerrain]"
						texture = "[Terrain.GetIcon]"
						size = { 35 35 }
						tooltip = "HOLDING_TERRAIN_TOOLTIP"
					}

					dynamicgridbox = {
						name = "holding_modifiers_grid"
						datamodel = "[HoldingView.GetHoldingModifiers]"
						flipdirection = yes

						item = {
							icon = {
								size = { 30 30 }
								alwaystransparent = no
								texture = "[ModifierItem.GetIcon]"
								using = tooltip_ne
								tooltip = "[ModifierItem.GetTooltip]"
							}
						}
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_vertical = expanding
					margin_left = 5
					spacing = 5
					min_width = 150

					background = {
						visible = "[HoldingView.HasHolding]"
						using = Background_Area_Dark
						alpha = 0.7
						margin_left = 5
						margin_bottom = -20
					}

					### Tax Income
					hbox = {
						name = "tutorial_highlight_holding_view_taxes_box"
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						tooltip = "[Holding.GetTaxTooltip]"

						background = {
							visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
							using = Status_Bad
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_TAX"
							default_format = "#high"
						}

						text_single = {
							text = "HOLDING_TAX_VALUE"
						}
					}

					### Raid loot
					hbox = {
						name = "tutorial_highlight_holding_view_loot_box"
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3
						tooltip = "[Holding.GetProvince.GetRaidLootTooltip]"

						background = {
							visible = "[Holding.GetProvince.IsRecentlyLooted]"
							using = Status_Bad
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "HOLDING_LOOT"
							default_format = "#high"
						}

						text_single = {
							text = "HOLDING_LOOT_VALUE"
						}
					}

					### Levies
					vbox = {
						visible = "[HoldingView.HasHolding]"
						layoutpolicy_horizontal = expanding
						spacing = 2

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 3
							margin = { 2 0 }

							tooltip = "[Holding.GetLeviesTooltip]"

							background = {
								visible = "[Holding.LevyAndTaxIsAffectedByFixableSituation]"
								using = Status_Bad
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "LEVIES"
								default_format = "#high"
							}

							text_single = {
								text = "HOLDING_LEVY_SIZE"
								default_format = "#high"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							progressbar_standard_transparent = {
								layoutpolicy_horizontal = expanding
								size = { 0 10 }
								value = "[Holding.GetUnraisedLevyRatioPercent]"
								direction = horizontal
							}
						}
					}


					### Supply Level
					hbox = {
						tooltip = "[HoldingView.GetSupplyLimitTooltip]"
						layoutpolicy_horizontal = expanding
						margin = { 2 0 }
						spacing = 3

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "SUPPLY_LIMIT"
							default_format = "#high"
						}

						text_single = {
							text = " [HoldingView.GetSupplyLimit|V]"
							default_format = "#high"
						}
					}

					expand = {}
				}
			}

			### BOTTOM RIGHT
			flowcontainer = {
				parentanchor = bottom|right
				spacing = 5
				direction = vertical
				visible = "[HoldingView.GetTitle.HasHolder]"

				button_standard = {
					datacontext = "[HoldingView.GetGUIHoldingBuilding]"
					parentanchor = right
					size = { 145 65 }
					allow_outside = yes
					onclick = "[GUIBuildingItem.OnClick]"
					down = "[GUIBuildingItem.IsHighlighted]"
					enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
					tooltip = "[GUIBuildingItem.GetTooltip]"

					vbox = {
						margin = { 4 1 }

						### Fort Info
						hbox = {
							visible = "[HoldingView.GetProvince.HasFort]"
							layoutpolicy_horizontal = expanding

							hbox = {
								spacing = 7
								tooltip = "[Province.GetFortLevelTooltip]"

								icon = {
									name = "icon_fort"
									texture = "gfx/interface/window_siege/fort_icon.dds"
									size = { 30 25 }
								}

								text_single = {
									text = "[HoldingView.GetProvince.GetFortLevel]"
									default_format = "#high"
									align = nobaseline
								}
							}

							hbox = {
								spacing = 2
								tooltip = "[HoldingView.GetGarrisonTooltip]"

								icon = {
									name = "icon_garrison"
									texture = "gfx/interface/icons/icon_garrison.dds"
									size = { 30 30 }
								}

								text_single = {
									text = "[HoldingView.GetHolding.GetGarrisonSize]"
									default_format = "#high"
									align = nobaseline
								}
							}

						}

						hbox = {
							spacing = 2

							text_single = {
								text = "[HoldingView.GetHolding.GetPrimaryBuildingType.GetTypeName]"
								align = nobaseline
							}

							text_single = {
								visible = "[GUIBuildingItem.HasLevel]"
								text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
								size = { 15 20 }
								margin = { 5 0 }
								margin_bottom = 3
								fontsize = 15
								default_format = "#low;bold"
								align = center;nobaseline

								background = {
									using = Background_Area_Dark
								}

								background = {
									using = Background_Area_Dark
								}

								background = {
									using = Background_Area_Dark
								}
							}

							icon = {
								name = "disabled"
								visible = "[GUIBuildingItem.IsBuildingDisabled]"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
							}

							icon = {
								name = "wrong_type"
								datacontext = "[HoldingView.GetHolder]"
								visible = "[And(Not(HoldingView.GetHolding.IsEmpty),Not(HoldingView.GetHolding.IsValidForLesseeOrHolder))]"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								tooltip = HOLDING_VIEW_WRONG_HOLDING_TYPE
							}

							icon = {
								name = "reduced_by_fixable_situation"
								visible = "[GUIBuildingItem.IsBuildingDisabled]"
								size = { 20 20 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
							}
						}

						progressbar_standard = {
							name = "holding_upgrade_progressbar"
							layoutpolicy_horizontal = expanding
							visible = "[GUIBuildingItem.IsConstructing]"
							size = { 0 10 }
							alwaystransparent = yes
							value = "[GUIBuildingItem.GetConstructingProgress]"
							tooltip = "[GUIBuildingItem.GetTooltip]"
						}
					}

					# button_normal = {
					# 	name = "building_button"
					# 	size = { 100% 100% }
					# 	alpha = 0

					# 	enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
					# 	onclick = "[GUIBuildingItem.OnClick]"
					# 	down = "[GUIBuildingItem.IsHighlighted]"

					# 	tooltip_parentanchor = "[GUIBuildingItem.GetTooltipParentAnchor]"
					# 	tooltip_widgetanchor = "[GUIBuildingItem.GetTooltipWidgetAnchor]"

					# 	state = {
					# 		name = _mouse_enter
					# 		alpha = 1
					# 	}

					# 	state = {
					# 		name = _mouse_leave
					# 		alpha = 0
					# 	}

					# 	highlight_icon = {
					# 		parentanchor = top|hcenter
					# 		position = { 0 5 }
					# 		texture = "gfx/interface/icons/icon_trend_arrow.dds"
					# 		framesize = { 22 22 }
					# 		frame = 1
					# 	}
					# }
				}

				flowcontainer = {
					name = "buildings_grid_special"
					parentanchor = right
					ignoreinvisible = yes
					margin_right = -3

					# Upgrade buildings
					flowcontainer = {
						name = "buildings_grid"
						datamodel = "[HoldingView.GetBuildings]"
						ignoreinvisible = yes
						spacing = 3
						margin_right = 3
						righttoleft = yes

						item = {
							widget_building_item = {}
						}
					}

					flowcontainer = {
						visible = "[Or(HoldingView.HasDuchyCapitalBuildingSlot, HoldingView.HasSpecialBuildingSlot )]"
						spacing = 3
						ignoreinvisible = yes

						widget_building_item = {
							name = "duchy_capital_building"
							datacontext = "[HoldingView.GetGUIDuchyCapitalBuilding]"
							visible = "[HoldingView.HasDuchyCapitalBuildingSlot]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_duchy_capital.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}

						widget_building_item = {
							name = "special_building"
							datacontext = "[HoldingView.GetGUISpecialBuilding]"
							visible = "[HoldingView.HasSpecialBuildingSlot]"

							button_standard = {
								size = { 100% 100% }
								texture = "gfx/interface/buttons/button_special_building.dds"
								alwaystransparent = yes
								spriteborder = { 20 20 }
							}
						}

						widget = {
							# THIS is needed to offset the building slots correctly when special building slots exist.
							name = "Conditional_margin_widget"
							size = { 0 0 }
							visible = "[HoldingView.HasSpecialBuildingSlot]"
						}
					}
				}
			}

		}
	}
}

######################################################
########### CONSTRUCT NEW BUILDING WINDOW ############
######################################################

window = {
	name = "holding_tracks_view"
	#parentanchor = bottom|left
	#widgetanchor = top|left
	#position = { 605 -1000 }
	size = { 100% 100% }
	movable = no
	layer = windows_layer

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		position_x = 0
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		position_x = -50
	}

	alwaystransparent = yes


	hbox = {
		expand = {
			max_width = 610
		}

		widget = {
			layoutpolicy_vertical = expanding
			size = { 670 0 }

			vbox = {
				margin_top = 170
				margin_bottom = 10

				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 700 }

					## New Building
					vbox = {
						visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no
						margin = { 3 3 }
						margin_bottom = 5
						using = Window_Background_Subwindow

						header_pattern = {
							layoutpolicy_horizontal = expanding

							blockoverride "header_text"
							{
								text = "[HoldingView.GetTracksViewLabel]"
							}

							blockoverride "button_close"
							{
								onclick = "[HoldingView.CloseSubwindows]"
							}
						}

						building_in_vassal_warning_hbox = {}

						text_single = {
							layoutpolicy_horizontal = shrinking
							name = "prompt"
							text = "[HoldingView.GetTracksViewPrompt]"
							margin_bottom = 10
						}

						text_single = {
							layoutpolicy_horizontal = shrinking
							visible = "[IsDataModelEmpty(HoldingView.GetPotentialBuildings)]"
							name = "no_potential_buildings_text"
							text = "NO_POTENTIAL_BUILDINGS_WARNING"
							margin_bottom = 10
						}

						## Construct New Building
						container = {
							layoutpolicy_vertical = expanding
							visible = "[Not(IsDataModelEmpty(HoldingView.GetPotentialBuildings))]"

							scrollbox = {
								visible = "[Not(HoldingView.IsSelectingBuildingToConstruct)]"
								size = { 700 300 }
								autoresizescrollarea = yes
								maximumsize = { -1 800 }

								blockoverride "scrollbox_content"
								{
									name = "tracks_grid"
									datamodel = "[HoldingView.GetPotentialBuildings]"
									visible = "[HoldingView.IsSelectingNewBuilding]"
									layoutpolicy_horizontal = expanding
									spacing = 10
									set_parent_size_to_minimum = yes

									block "scrollbox_margins"
									{
										using = Scrollbox_Margins
										margin_right = 15
										margin_top = 5
									}

									item = {
										vbox = {
											layoutpolicy_horizontal = expanding

											background = {
												using = Background_Area_Light
											}

											hbox = {
												name = "header"
												layoutpolicy_horizontal = expanding

												background = {
													using = Background_Area
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													margin = { 10 10 }
													spacing = 10

													icon_building = {
														name = "building_icon"
														size = { 75 65 }
														texture = "[GUIPotentialBuildingItem.GetBuilding.GetTypeIcon]"
													}

													vbox = {
														spacing = 5

														text_single = {
															layoutpolicy_horizontal = expanding
															text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeName]"
															using = Font_Size_Medium
															align = left
														}

														hbox = {
															layoutpolicy_horizontal = expanding

															button_standard_small = {
																text = "CONSTRUCT_BUILDINGS_DETAILS"

																onclick = "[GUIPotentialBuildingItem.ShowDetails]"
																tooltip = "CONSTRUCT_BUILDINGS_DETAILS_TT"
																using = tooltip_es
															}

															expand = {}
														}
													}

													expand = {}

													hbox = {
														spacing = 5

														hbox = {
															margin = { 5 5 }
															min_width = 120
															spacing = 10

															background = {
																using = Background_Area
																margin = { 0 2 }
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetGoldCost]"
																visible = "[GUIPotentialBuildingItem.HasGoldCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUIPotentialBuildingItem.GetPrestigeCost]"
																visible = "[GUIPotentialBuildingItem.HasPrestigeCost]"
																layoutpolicy_horizontal = expanding
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetPietyCost]"
																visible = "[GUIPotentialBuildingItem.HasPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																layoutpolicy_horizontal = expanding
																datacontext = "[GUIPotentialBuildingItem.GetConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															expand = {}
														}

														button_standard = {
															layoutpolicy_horizontal = expanding
															layoutpolicy_vertical = expanding
															size = { 100 53 }
															enabled = "[GUIPotentialBuildingItem.CanConstruct]"
															tooltip = "[GUIPotentialBuildingItem.GetTooltip]"
															onclick = "[GUIPotentialBuildingItem.Construct]"
															text = "CONSTRUCT"
															using = tooltip_es
														}
													}
												}
											}

											hbox = {
												name = "dynamic_content"
												layoutpolicy_horizontal = expanding
												margin = {5 5}

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = {5 0}
													text = "[GUIPotentialBuildingItem.GetBuilding.GetTypeDescription]"
													default_format = "#F"
													autoresize = yes
													max_width = 280
													min_width = 280
												}

												vbox = {
													spacing = 8

													hbox = {
														layoutpolicy_horizontal = expanding
														margin_left = 10

														text_label_left = {
															layoutpolicy_horizontal = expanding
															datacontext = "[GUIPotentialBuildingItem.GetBuilding]"
															text = CV_BUILDING_LEVEL_AND_NAME
														}
													}

													text_multi = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														autoresize = yes
														max_width = 330
														min_width = 330
														text = "[GUIPotentialBuildingItem.GetBuilding.GetEffectDescription]"
														margin = { 15 10 }

														background = {
															using = Background_Frame
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						vbox = {
							visible = "[HoldingView.IsSelectingBuildingToConstruct]"
							layoutpolicy_horizontal = expanding
							alwaystransparent = no

							## Upgrade Building
							vbox = {
								name = "upgrade"
								datacontext = "[HoldingView.GetTrack]"
								layoutpolicy_horizontal = expanding
								#minimumsize = { 0 700 }
								using = Window_Background_Subwindow
								margin_bottom = 10

								hbox = {
									layoutpolicy_horizontal = expanding
									margin = { 15 10 }
									spacing = 10

									background = {
										using = Background_Area
									}

									icon_building = {
										name = "building_icon"
										texture = "[GUITrackItem.GetSelectedBuilding.GetTypeIcon]"
									}

									vbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetSelectedBuilding.GetTypeName]"
											using = Font_Size_Big
											default_format = "#high"
										}

										text_single = {
											layoutpolicy_horizontal = expanding
											text = "[GUITrackItem.GetBuildingTypeText]"
										}

										building_in_vassal_warning_hbox = {
										}
									}

									buttons_window_control = {
										blockoverride "button_close"
										{
											onclick = "[HoldingView.CloseSubwindows]"
										}
									}
								}

								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 15 5 }

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 5 10 }

										### PREVIOUS BUILDINGS
										hbox = {
											name = "level_track_previous"
											datamodel = "[GUITrackItem.GetPreLevelItems]"

											item = {
												hbox = {
													button_icon = {
														name = "track_icon"
														onclick = "[BuildingLevelItem.OnClick]"
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"

														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"

														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														background = {
															texture = "gfx/interface/window_county/building_status_circle.dds"
															framesize = { 120 120 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 3
															}
														}

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}

													widget = {
														visible = "[GUITrackItem.HasCurrentBuilding]"
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }

															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}
												}
											}
										}

										### CURRENT BUILDING
										button_icon = {
											name = "current_building"
											visible = "[GUITrackItem.HasCurrentBuilding]"
											onclick = "[GUITrackItem.OnCurrentBuildingClick]"
											down = "[GUITrackItem.IsCurrentBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsCurrentBuildingSelected]"
											tooltip = "[GUITrackItem.GetCurrentBuildingTooltip]"
											using = tooltip_ws
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 3
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsCurrentBuildingSelected]"
												texture = "[GUITrackItem.GetCurrentLevelIcon]"
											}

											icon = {
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										expand = {
											visible = "[Not(And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding))]"
										}

										widget = {
											visible = "[And(GUITrackItem.HasCurrentBuilding, GUITrackItem.HasNextBuilding)]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										### NEXT BUILDING
										button_icon = {
											name = "next_building"
											visible = "[GUITrackItem.HasNextBuilding]"
											down = "[GUITrackItem.IsNextBuildingSelected]"
											alwaystransparent = "[GUITrackItem.IsNextBuildingSelected]"
											size = { 60 60 }
											texture = "gfx/interface/buttons/button_round_big.dds"
											onclick = "[GUITrackItem.OnNextBuildingClick]"
											tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
											using = tooltip_ne
											tooltip_offset = { 40 0 }

											background = {
												visible = "[GUITrackItem.IsConstructing]"
												texture = "gfx/interface/window_county/building_status_circle.dds"
												framesize = { 120 120 }
												frame = 2
												alpha = 0.5
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 4
												}
											}

											button_icon_highlight = {
												name = "level_icon"
												parentanchor = center
												size = { 41 24 }
												down = "[GUITrackItem.IsNextBuildingSelected]"
												alwaystransparent = yes
												texture = "[GUITrackItem.GetNextLevelIcon]"
												#frame = "[GUITrackItem.GetNextLevelIconFrame]"
											}

											icon = {
												visible = "[GUITrackItem.IsNextBuildingSelected]"
												parentanchor = bottom|hcenter
												position = { 0 8 }
												texture = "gfx/interface/window_county/building_selected_arrow.dds"
												size = { 18 12 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 2
												}
											}
										}

										widget = {
											visible = "[Not(IsDataModelEmpty( GUITrackItem.GetPostLevelItems ))]"
											layoutpolicy_horizontal = expanding
											size = { 5 6 }

											background = {
												texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
												margin = { 2 0 }
												using = Master_Button_Modify_Texture

												blockoverride "master_color_frame" {
													frame = 1
												}
											}
										}

										#Post Track
										### LEVEL TRACK
										hbox = {
											name = "level_track_next"
											datamodel = "[GUITrackItem.GetPostLevelItems]"

											item = {
												hbox = {
													widget = {
														layoutpolicy_horizontal = expanding
														size = { 5 6 }

														background = {
															texture = "gfx/interface/icons/building_types/building_buttons_connector.dds"
															margin = { 2 0 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 1
															}
														}
													}

													button_icon = {
														down = "[BuildingLevelItem.IsSelected]"
														alwaystransparent = "[BuildingLevelItem.IsSelected]"
														size = { 60 60 }
														texture = "gfx/interface/buttons/button_round_big.dds"
														onclick = "[BuildingLevelItem.OnClick]"
														tooltip = "[BuildingLevelItem.GetTooltip]"
														using = tooltip_ne
														tooltip_offset = { 40 0 }

														button_icon_highlight = {
															name = "level_icon"
															parentanchor = center
															size = { 41 24 }
															down = "[BuildingLevelItem.IsSelected]"
															texture = "[BuildingLevelItem.GetIcon]"
															#frame = 2
														}

														icon = {
															visible = "[BuildingLevelItem.IsSelected]"
															parentanchor = bottom|hcenter
															position = { 0 8 }
															texture = "gfx/interface/window_county/building_selected_arrow.dds"
															size = { 18 12 }
															using = Master_Button_Modify_Texture

															blockoverride "master_color_frame" {
																frame = 2
															}
														}
													}
												}
											}
										}
									}

									spacer = {
										size = { 10 10 }
									}

									# Buliding info
									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Frame
										}

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_top = 5
											margin_left = 15

											text_label_left = {
												layoutpolicy_horizontal = expanding
												text = "[GUITrackItem.GetSelectedBuilding.GetNameNoTooltip]"
												default_format = "#high"
												using = Font_Size_Medium
											}
										}

										hbox = {
											name = "flavor_and_effect"
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 5 5 }

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												text_multi = {
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													margin = { 10 5 }
													autoresize = yes
													max_width = 330
													min_width = 330
													text = "[GUITrackItem.GetSelectedBuilding.GetDescription]"
												}

												hbox = {
													visible = "[And(And(GUITrackItem.CanReplaceOrCancel, GUITrackItem.IsCurrentBuildingSelected), Not(GUITrackItem.IsConstructing))]"
													spacing = 10
													margin_bottom = 5

													text_single = {
														text = "CURRENT_BUILDING"
														default_format = "#weak"
														align = nobaseline
													}
												}

												vbox = {
													visible = "[And(And(GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,GUITrackItem.GetCurrentBuilding.GetLevel),GreaterThan_int32(GUITrackItem.GetSelectedBuilding.GetLevel,'(int32)1')), Not(GUITrackItem.IsNextBuildingSelected))]"
													layoutpolicy_horizontal = expanding
													margin_left = 10
													margin_bottom = 5
													spacing = 5

													text_label_left = {
														layoutpolicy_horizontal = expanding
														text = "UPGRADE_COST"
													}

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 10
														margin = { 10 10 }

														hbox = {
															spacing = 10

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedGoldCost]"
																visible = "[GUITrackItem.HasSelectedGoldCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}

																background = {
																	visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
																	using = Status_Bad
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPrestigeCost]"
																visible = "[GUITrackItem.HasSelectedPrestigeCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedPietyCost]"
																visible = "[GUITrackItem.HasSelectedPietyCost]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}

															text_single = {
																datacontext = "[GUITrackItem.GetSelectedConstructionTime]"
																text = "[ValueBreakdown.GetValue]"
																align = nobaseline
																tooltip_enabled = "[ValueBreakdown.HasTooltip]"

																tooltipwidget = {
																	widget_value_breakdown_tooltip = {}
																}
															}
														}

														icon = {
															name = "cant_construct"
															size = { 30 30 }
															texture = "gfx/interface/icons/symbols/icon_warning.dds"
															tooltip = "[GUITrackItem.GetSelectedBuildingBlockReasons]"
															visible = "[Not(GUITrackItem.CanConstructSelectedBuilding)]"
														}

														expand = {}
													}
												}

											}

											divider_light = {
												layoutpolicy_vertical = expanding
											}

											text_multi = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												autoresize = yes
												max_width = 280
												min_width = 280
												text = "[GUITrackItem.GetSelectedBuilding.GetEffectDescription]"
												margin = { 15 10 }
											}
										}
									}

									vbox = {
										visible = "[GUITrackItem.IsConstructing]"
										layoutpolicy_horizontal = expanding
										margin = { 0 15 }
										spacing = 10

										text_single = {
											text = "HOLDING_VIEW_IN_PROGRESS"
											margin = { 0 5 }
										}

										hbox = {
											spacing = 10

											hbox = {
												widget = {
													size = { 20 20 }

													button_round  = {
														name = "abort_button"
														parentanchor = center
														visible = "[GUITrackItem.CanReplaceOrCancel]"
														onclick = "[GUITrackItem.ReplaceOrCancel]"
														tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"

														button_cancel = {
															parentanchor = center
															alwaystransparent = yes
														}
													}
												}
											}

											progressbar_standard = {
												name = "construct_progressbar"
												layoutpolicy_horizontal = expanding
												layoutstretchfactor_horizontal = 1
												size = { 300 25 }
												alwaystransparent = yes
												value = "[GUITrackItem.GetConstructionProgress]"

												text_single = {
													parentanchor = center
													text = "[GUITrackItem.GetConstructTimeLeft]"
													default_format = "#high"
													align = nobaseline
												}
											}
										}
									}

									spacing = 5

									hbox = {
										visible = "[Not(GUITrackItem.IsConstructing)]"
										spacing = 10
										# layoutpolicy_horizontal = expanding
										margin = { 10 10 }
										vbox = {
											layoutpolicy_vertical = expanding
											expand = {}
											margin_bottom = 7

											button_standard = {
												name = "back_button"
												text = "BACK_LABEL"
												visible = "[And(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel,'(int32)1'), Not(GUITrackItem.IsConstructing))]"
												onclick = "[GUITrackItem.GoBack]"
												oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
												clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
											}

											button_round = {
												name = "replace_button"
												onclick = "[GUITrackItem.ReplaceOrCancel]"
												tooltip = "[GUITrackItem.GetReplaceOrCancelTooltip]"
												visible = "[GUITrackItem.IsCurrentBuildingSelected]"

												button_change = {
													alwaystransparent = yes
													parentanchor = center
												}
											}
										}
										vbox = {
											hbox = {
												visible = "[GUITrackItem.HasNextBuilding]"
												layoutpolicy_horizontal = expanding

												hbox = {
													margin = { 10 5 }
													margin_right = 15
													spacing = 10

													background = {
														using = Background_Area
														margin = { 0 2 }
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextGoldCost]"
														visible = "[GUITrackItem.HasNextGoldCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetGold, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}

													text_single = {
														datacontext = "[GUITrackItem.GetNextPrestigeCost]"
														visible = "[GUITrackItem.HasNextPrestigeCost]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}

														background = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPrestige, ValueBreakdown.GetFixedPointValue)]"
															using = Status_Bad
														}
													}


													hbox = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextPietyCost]"
														visible = "[GUITrackItem.HasNextPietyCost]"

														text_single = {
															text = "[ValueBreakdown.GetValue]"
															tooltip_enabled = "[ValueBreakdown.HasTooltip]"

															tooltipwidget = {
																widget_value_breakdown_tooltip = {}
															}
														}

														text_single = {
															visible = "[LessThan_CFixedPoint(GetPlayer.GetPiety, ValueBreakdown.GetFixedPointValue)]"
															text = "@warning_icon!"
														}

														expand = {}
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														datacontext = "[GUITrackItem.GetNextConstructionTime]"
														text = "[ValueBreakdown.GetValue]"
														tooltip_enabled = "[ValueBreakdown.HasTooltip]"

														tooltipwidget = {
															widget_value_breakdown_tooltip = {}
														}
													}
												}
											}

											button_primary = {
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding
												size = { 250 53 }
												onclick = "[GUITrackItem.OnClick]"
												tooltip = "[GUITrackItem.GetNextBuildingTooltip]"
												enabled = "[GUITrackItem.CanConstructNextBuilding]"
												visible = "[GUITrackItem.HasNextBuilding]"
												text = "[SelectLocalization(EqualTo_int32(GUITrackItem.GetNextBuilding.GetLevel, '(int32)1'),'CONSTRUCT','UPGRADE')]"
												using = Font_Size_Medium
											}

										}
									}
								}
							}
						}

						expand = {}
					}

					expand = {}
				}
			}
		}

		expand = {}
	}
}

######################################################
############ HOLDING TYPE SELECTION VIEW #############
######################################################

window = {
	name = "holding_type_selection_view"
	movable = no
	layer = windows_layer
	parentanchor = bottom|hcenter
	position = { 70 -50 }
	using = Window_Background_Popup

	vbox = {
		set_parent_size_to_minimum = yes
		margin = { 20 20 }
		spacing = 15

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "CREATE_NEW_HOLDING"
			}

			blockoverride "button_close"
			{
				onclick = "[HoldingView.CloseHoldingConstruction]"
			}
		}

		building_in_vassal_warning_hbox = {}

		hbox = {
			name = "holding_types"
			datamodel = "[HoldingView.GetHoldingTypeItems]"
			layoutpolicy_horizontal = expanding
			spacing = 10

			item = {
				vbox = {
					spacing = 5

					button_standard = {
						size = { 250 150 }
						enabled = "[HoldingTypeItem.CanConstructBuilding]"
						onclick = "[HoldingTypeItem.OnClick]"
						tooltip = "[HoldingTypeItem.GetTooltip]"
						datacontext = "[HoldingTypeItem.GetProvince]"

						highlight_icon = {
							size = { 100% 100% }
							gfxtype = framedbuttongfx
							texture = "[HoldingTypeItem.GetBuilding.GetIllustration(Province.Self)]"
						}

						flowcontainer = {
							parentanchor = bottom|right
							ignoreinvisible = yes
							margin = { 5 5 }

							icon = {
								name = "wrong_type"
								visible = "[Not(HoldingTypeItem.IsValidForPlayer)]"
								size = { 35 35 }
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								tooltip = HOLDING_SELECTION_VIEW_WRONG_HOLDING_TYPE
							}
						}
					}

					text_label_center = {
						layoutpolicy_horizontal = expanding
						text = "[HoldingTypeItem.GetHoldingType.GetName]"
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types CountyViewTypes
{
	type widget_building_item = widget {
		parentanchor = bottom
		size = { 55 55 }
		enabled = "[GUIBuildingItem.IsBuildingButtonEnabled]"
		tooltip = "[GUIBuildingItem.GetTooltip]"
		using = tooltip_ne

		button_standard = {
			name = "building_button"
			size = { 100% 100% }
			onclick = "[GUIBuildingItem.OnClick]"
			down = "[GUIBuildingItem.IsHighlighted]"

			highlight_icon = {
				name = "build_new_icon"
				visible = "[And(And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), Not(GUIBuildingItem.HasLevel))]"
				parentanchor = center
				size = { 28 28 }
				alpha = 0.7
				texture = "gfx/interface/icons/symbols/icon_plus.dds"
			}

			icon_building = {
				name = "building_icon"
				visible = "[Not(And( And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), GUIBuildingItem.HasLevel ))]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			highlight_icon_building = {
				name = "building_icon_can_upgrade"
				visible = "[And( And(GUIBuildingItem.IsBuildNewIconShown, GUIBuildingItem.IsBuildingButtonEnabled), GUIBuildingItem.HasLevel )]"
				parentanchor = center
				size = { 40 40 }
				texture = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetTypeIcon]"
			}

			# button_icon_highlight = {
			# 	name = "level_icon"
			# 	parentanchor = bottom|right
			# 	position = { -10 -5 }
			# 	size = { 40 40 }
			# 	scale = 0.4
			# 	framesize = { 55 55 }
			# 	visible = "[GUIBuildingItem.HasLevel]"
			# 	texture = "[GUIBuildingItem.GetLevelTexture]"
			# 	frame = "[GUIBuildingItem.GetLevelFrame]"

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}

			# 	background = {
			# 		using = Background_Area_Dark
			# 		margin = { 0 2 }
			# 	}
			# }

			text_single= {
				visible = "[GUIBuildingItem.HasLevel]"
				text = "[GUIBuildingItem.GetCurrentOrConstrucingBuilding.GetLevel]"
				parentanchor = bottom|right
				position = { -6 -3 }
				#using = Font_Type_Flavor
				fontsize = 15
				default_format = "#low;bold"
				align = nobaseline

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}

				background = {
					using = Background_Area_Dark
					margin = { 5 0 }
				}
			}

			icon = {
				name = "reduced_by_fixable_situation"
				visible = "[GUIBuildingItem.IsBuildingDisabled]"
				size = { 25 25 }
				texture = "gfx/interface/icons/symbols/icon_warning.dds"
			}
		}

		icon = {
			name = "building_slot"
			size = { 100% 100% }
			using = Background_Area
			visible = "[GUIBuildingItem.IsBuildingSlotShown]"
		}

		progressbar_standard = {
			name = "construct_progressbar"
			visible = "[GUIBuildingItem.IsConstructing]"
			parentanchor = bottom
			position = { 0 8 }
			alwaystransparent = yes
			size = { 100% 10 }
			value = "[GUIBuildingItem.GetConstructingProgress]"
			direction = horizontal
			tooltip = "[GUIBuildingItem.GetTooltip]"
		}
	}

	type building_in_vassal_warning_hbox = hbox
	{
		name = "vassal_warning"
		visible = "[Not( ObjectsEqual( HoldingView.GetHolder, GetPlayer ) )]"

		coa_title_tiny = {
			datacontext = "[HoldingView.GetHolder.GetPrimaryTitle]"
		}

		text_multi = {
			autoresize = yes
			text = "HOLDING_VIEW_BUILDING_IN_VASSAL"
		}
	}
}

