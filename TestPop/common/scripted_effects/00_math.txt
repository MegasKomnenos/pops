# Parameters: exp, prec, return
# Use Brothers method to calculate e
e_effect = {
	set_variable = { name = math_e_exp value = $exp$ }
	set_variable = { name = $return$ value = 1 }
	
	# Reduce the range of exp so that it is greater than equal to 0 and lesser than 1
	# Brothers method yields extremely low error for low exponent
	# Even with low precision
	while = {
		limit = {
			var:math_e_exp >= 1
		}
		change_variable = { name = math_e_exp subtract = 1 }
		change_variable = { name = $return$ multiply = 2.718 }
	}
	while = {
		limit = {
			var:math_e_exp < 0
		}
		change_variable = { name = math_e_exp add = 1 }
		change_variable = { name = $return$ divide = 2.718 }
	}
	
	# Use brothers formula now that exponent is between 0 and 1
	set_variable = { name = math_e_sm value = 1 }
	
	if = {
		limit = {
			var:math_e_exp != 0
		}
		set_variable = { name = math_e_sq value = var:math_e_exp }
		change_variable = { name = math_e_sq multiply = var:math_e_exp }
		
		set_variable = { name = math_e_fct value = 2 }
		set_variable = { name = math_e_fctl value = 2 }
		
		set_variable = { name = math_e_a1 value = var:math_e_sq }
		set_variable = { name = math_e_a2 value = var:math_e_exp }
		set_variable = { name = math_e_a3 value = 2 }
		
		set_variable = { name = math_e_tmp value = var:math_e_a2 }
		change_variable = { name = math_e_tmp multiply = var:math_e_a3 }
		change_variable = { name = math_e_tmp add = var:math_e_a1 }
		change_variable = { name = math_e_tmp divide = var:math_e_fct }
		
		change_variable = { name = math_e_sm add = var:math_e_tmp }
		
		set_variable = { name = math_e_prec value = $prec$ }
		change_variable = { name = math_e_prec subtract = 1 }	# The above procedure is precision 1
		
		while = {
			limit = {
				var:math_e_prec >= 1
			}
			change_variable = { name = math_e_prec subtract = 1 }
			
			change_variable = { name = math_e_fctl add = 1 }
			change_variable = { name = math_e_fct multiply = var:math_e_fctl }
			change_variable = { name = math_e_fctl add = 1 }
			change_variable = { name = math_e_fct multiply = var:math_e_fctl }
			
			change_variable = { name = math_e_a1 multiply = var:math_e_sq }
			change_variable = { name = math_e_a2 multiply = var:math_e_sq }
			change_variable = { name = math_e_a3 add = 2 }
			
			set_variable = { name = math_e_tmp value = var:math_e_a2 }
			change_variable = { name = math_e_tmp multiply = var:math_e_a3 }
			change_variable = { name = math_e_tmp add = var:math_e_a1 }
			change_variable = { name = math_e_tmp divide = var:math_e_fct }
			
			change_variable = { name = math_e_sm add = var:math_e_tmp }
		}
	}
	
	# Return
	change_variable = { name = $return$ multiply = var:math_e_sm }
	
	
	# Clean
	remove_variable = math_e_sm
	remove_variable = math_e_tmp
	remove_variable = math_e_a1
	remove_variable = math_e_a2
	remove_variable = math_e_a3
	remove_variable = math_e_fctl
	remove_variable = math_e_fct
	remove_variable = math_e_prec
	remove_variable = math_e_sq
	remove_variable = math_e_exp
}

# Parameter: ind, return
# Log table for 1 + 2^-i for some integers i
lt_effect = {
	set_variable = { name = math_lt_ind value = $ind$ }
	
	if = {
		limit = {
			var:math_lt_ind >= 6
		}
		if = {
			limit = {
				var:math_lt_ind >= 8
			}
			if = {
				limit = {
					var:math_lt_ind >= 9
				}
				if = {
					limit = {
						var:math_lt_ind >= 10
					}
					set_variable = { name = $return$ value = 9.761 }
				}
				else = {
					set_variable = { name = $return$ value = 19.512 }
				}
			}
			else = {
				set_variable = { name = $return$ value = 38.986 }
			}
		}
		else = {
			if = {
				limit = {
					var:math_lt_ind >= 7
				}
				set_variable = { name = $return$ value = 77.821 }
			}
			else = {
				set_variable = { name = $return$ value = 155.042 }
			}
		}
	}
	else = {
		if = {
			limit = {
				var:math_lt_ind >= 3
			}
			if = {
				limit = {
					var:math_lt_ind >= 4
				}
				if = {
					limit = {
						var:math_lt_ind >= 5
					}
					set_variable = { name = $return$ value = 307.717 }
				}
				else = {
					set_variable = { name = $return$ value = 606.246 }
				}
			}
			else = {
				set_variable = { name = $return$ value = 1177.83 }
			}
		}
		else = {
			if = {
				limit = {
					var:math_lt_ind >= 2
				}
				set_variable = { name = $return$ value = 2231.436 }
			}
			else = {
				set_variable = { name = $return$ value = 4054.651 }
			}
		}
	}
	
	remove_variable = math_lt_ind
}

# Parameter: inp, return
# Use Feyman's method with precalculated log table to calculate ln
# Returns -1 if inp <= 0
ln_effect = {
	set_variable = { name = math_ln_inp value = $inp$ }
	set_variable = { name = $return$ value = 0 }

	set_variable = { name = math_ln_k value = 0 }
	set_variable = { name = math_ln_div value = 10000 }
	
	# Normalize inp so that 1 <= inp < 2
	while = {
		limit = {
			var:math_ln_inp >= 2
		}
		change_variable = { name = math_ln_inp divide = 2 }
		change_variable = { name = $return$ add = 6931.472 }
	}
	while = {
		limit = {
			var:math_ln_inp < 1
		}
		change_variable = { name = math_ln_inp multiply = 2 }
		change_variable = { name = $return$ subtract = 6931.472 }
	}
	
	change_variable = { name = math_ln_inp multiply = 10000 }
	
	while = {
		limit = {
			var:math_ln_k < 10	# precision = 10
		}
		change_variable = { name = math_ln_k add = 1 }
		change_variable = { name = math_ln_div divide = 2 }
		
		set_variable = { name = math_ln_t value = 10000 }
		change_variable = { name = math_ln_t add = var:math_ln_div }
		
		if = {
			limit = {
				var:math_ln_inp = { compare_value >= prev.var:math_ln_t }
			}
			change_variable = { name = math_ln_inp divide = var:math_ln_t }
			change_variable = { name = math_ln_inp multiply = 10000 }
			
			lt_effect = { ind = var:math_ln_k return = math_ln_lt }
			
			change_variable = { name = $return$ add = var:math_ln_lt }
		}
	}
	
	change_variable = { name = $return$ divide = 10000 }
	
	remove_variable = math_ln_k
	remove_variable = math_ln_div
	remove_variable = math_ln_t
	remove_variable = math_ln_lt
	
	remove_variable = math_ln_inp
}

# Parameter: inp, exp, return
# x^(int + dec) = (x^int)*(x^dec) = (x^int)*(e^(dec * ln x))
pow_effect = {
	set_variable = { name = math_pow_base value = $inp$ }
	set_variable = { name = math_pow_exp value = $exp$ }
	
	if = {
		limit = {
			has_variable = math_pow_base
			
			var:math_pow_base != 0
		}
		set_variable = { name = $return$ value = 1 }

		while = {
			limit = {
				var:math_pow_exp >= 1
			}
			change_variable = { name = math_pow_exp subtract = 1 }
			change_variable = { name = $return$ multiply = var:math_pow_base }
		}
		while = {
			limit = {
				var:math_pow_exp < 0
			}
			change_variable = { name = math_pow_exp add = 1 }
			change_variable = { name = $return$ divide = var:math_pow_base }
		}
		
		if = {
			limit = {
				var:math_pow_exp != 0
			}
			ln_effect = { inp = var:math_pow_base return = math_pow_ln }
			change_variable = { name = math_pow_exp multiply = var:math_pow_ln }

			e_effect = { exp = var:math_pow_exp prec = 3 return = math_pow_e }

			change_variable = { name = $return$ multiply = var:math_pow_e }
			
			remove_variable = math_pow_ln
			remove_variable = math_pow_e
		}
	}
	else_if = {
		limit = {
			OR = {
				NOT = {
					has_variable = math_pow_exp
				}
				
				var:math_pow_exp = 0
			}
		}
		set_variable = { name = $return$ value = 1 }
	}
	else = {
		set_variable = { name = $return$ value = 0 }
	}
	
	remove_variable = math_pow_base
	remove_variable = math_pow_exp
}

# Parameter: inp, root, return
root_effect = {
	set_variable = { name = math_root_exp value = 1 }
	change_variable = { name = math_root_exp divide = $root$ }
	
	pow_effect = {
		inp = $inp$
		exp = var:math_root_exp
		return = $return$
	}
	
	remove_variable = math_root_exp
}

# Parameter: inp, return
sqrt_effect = {
	set_variable = { name = math_sqrt_m value = $inp$ }

	if = {
		limit = {
			has_variable = math_sqrt_m
			
			var:math_sqrt_m > 0
		}
		set_variable = { name = math_sqrt_i value = 0 }
		
		while = {
			limit = {
				var:math_sqrt_m >= math_sqrt_i_squared
			}
			change_variable = { name = math_sqrt_i add = 0.1 }
		}
		
		set_variable = { name = math_sqrt_x1 value = var:math_sqrt_i }
		
		set_variable = { name = math_sqrt_j value = 10 }
		
		while = {
			limit = {
				has_variable = math_sqrt_j
				
				var:math_sqrt_j > 0
			}
			change_variable = { name = math_sqrt_j subtract = 1 }
			
			set_variable = { name = math_sqrt_x2 value = var:math_sqrt_m }
			change_variable = { name = math_sqrt_x2 divide = var:math_sqrt_x1 }
			change_variable = { name = math_sqrt_x2 add = var:math_sqrt_x1 }
			change_variable = { name = math_sqrt_x2 divide = 2 }
			set_variable = { name = math_sqrt_x1 value = var:math_sqrt_x2 }
		}
		
		set_variable = { name = $return$ value = var:math_sqrt_x1 }
		
		remove_variable = math_sqrt_i
		remove_variable = math_sqrt_j
		remove_variable = math_sqrt_x1
		remove_variable = math_sqrt_x2
	}
	else = {
		set_variable = { name = $return$ value = 0 }
	}

	remove_variable = math_sqrt_m
}